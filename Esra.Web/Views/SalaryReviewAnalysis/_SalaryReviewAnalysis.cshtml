@model Esra.Web.Models.SalaryReviewAnalysisEditorViewModel
<script type="text/javascript">

    //var dtable; // This is the jQuery dataTable used to display the scenarios list.
    var oldSalary; // This is the pre-analysis salary amount used for percent increase calculations, etc.
    var defaultScenario; // This is new scenario initialized with the employee's default select list options, salary amount, etc.
    var scenarios = [];  // This is where we store the "original" scenarios so that we can reset the values back to their pre-edited state.
    var defaultSelectionTypeOptions; // This is the base set of custom criteria selectionType options based on the employee being analyzed.
    var selectionTypeTextDictionary = new Array(); // For looking up the index based on a selection type's text value.
    $(document).ready(function () {
        // We don"t really need all the features of jQuery data table, but we"re using it because
        // it allows easier access to the table cell"s data.

        //        dtable = $("#scenarios").dataTable({
        //            "bProcessing": true,
        //            //"bServerSide": true,
        //            "bJQueryUI": true,
        //            "aLengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],  // This allows for the "display all" records feature.
        //            "sPaginationType": "full_numbers",
        //            "aaSorting": [[0, "asc"]], // Change default sort to scenario number; otherwise it sorts by column 0.
        //            "aoColumns": [
        //															{ "mDataProp": "scenarioNumber", "sName": "ScenarioNumber" },  // "bVisible": false "hides" the column from the user.
        //															{"mDataProp": "selectionType", "sName": "SelectionType" },
        //															{ "mDataProp": "percentIncrease", "sName": "PercentIncrease", "sType": "percent" }, // "sName": HomeDepartment gives the column a name in the oSettings.aoColumns[] array.  This is used in _ExportToExcel.
        //															{"mDataProp": "salaryAmount", "sName": "SalaryAmount", "sType": "currency" },
        //															{ "mDataProp": "approved", "sName": "Approved" },
        //															{ "mDataProp": "resetDelete", "sName": "Reset-Delete", "bSortable": false }
        //														],
        //            "oLanguage": { "sEmptyTable": "No scenarios found." }
        //        });

        // The old salary needed to be included as a hidden field
        // because the table cell that contains it had an "/n", and currency formatting making converting it back
        // to a numerical value more difficult than just getting the value from a hidden field.
        //
        // User"s current annual salary from the hidden salary field.
        oldSalary = $("#oldSalary")[0].value;

        var defaultSelectionTypeOptionsHtml = $("#ddlSelectionType[0]").html();
        // clear out any selected items
        defaultSelectionTypeOptions = defaultSelectionTypeOptionsHtml.replace(/selected?=.?["|']selected["|']/, "");

        $("#scenarioTemplate").template("scenarioTemplate");

        var scenarioIndex = 0;
        var data = buildScenarioDataArray(scenarioIndex)
        // We'll use this as a jumping off place in case a user deletes all the existing scenarios, and then wants to add
        // a new one.
        defaultScenario = $.tmpl("scenarioTemplate", data);

        // This builds a dictionary of selection type option text values so that we can
        // retrieve the e corresponding index.
        // Used for resetting a scenario back to its original values.
        $($(defaultScenario).find('#ddlSelectionType')[0].options).each(function (i, val) {
            val = $(val);
            var text = val.text();
            selectionTypeTextDictionary[text] = i;
        });

        //        var mySettings = dtable.fnSettings().nTBody.children;
        //        //        var myData = dtable.fnSettings().aoData;

        //        //        //var defaultScenarioHtml = defaultScenario.html();
        //        //        var tds = defaultScenario.find('th, td');
        //        //        var tdHtmlArray = new Array();
        //        //        tds.each(function (i, val) {
        //        //            debugger;
        //        //            var htmlString = $(val).html();
        //        //            tdHtmlArray[i] = htmlString;
        //        //        });

        //        //        dtable.fnAddData(tdHtmlArray);

        //        // All of this logic gives us the ability to use the field names instead of having to memorize their
        //        // cell positions in the table.
        //        // I put it here so it only needed to be done once.
        //        var oSettings = dtable.fnSettings();
        //        var oColumns = oSettings.aoColumns;
        //        var i;
        //        var oColumnNames = new Array();
        //        for (i = 0; i < oColumns.length; i++) {
        //            oColumnNames[oColumns[i].sName] = i;
        //        };

        // This adds a date picker to the DataApproved field:
        $(function () {
            $("#SalaryReviewAnalysis_DateApproved").datepicker();
        });

        //        var originalScenariosRows = dtable.find('tbody tr');
        var originalScenariosRows = $('#scenarios').find('tbody tr');
        saveOriginalScenarioValues(originalScenariosRows);

        //$(".currency").formatCurrency();  // This is necessary because EditorFor needed to be replaced with TextBoxFor as editor for
        // does not include an overload for html attributes, and TextAreaFor does.  The html attributes was necessary in order to
        // include a new { class = "currency" } that is used for adding the $, comma(s), and decimal point to the newly updated
        // SalaryAmount.  However, this removed the currency formatting of the initial value, so the call to format currency
        // needed to be added here to restore the currency formatting formerly provided by the Model (or domain) class.

        // Similarly, format the percent increases by multiplying by 100 and adding the percent signs:
        //        $(this).find(".percent").formatNumber({ format: "#0.00%", locale: "us" });

        // Helper method to save the original scenario values used for "resetting" them back to their initial state:
        function saveOriginalScenarioValues(originalScenariosRows) {
            originalScenariosRows.each(function (i, val) {
                saveScenarioValues(i, val);
            });
        }

        function getScenarioNumber(row) {
            row = $(row);
            var scenarioNumber = row.find("#hiddenScenarioNumber").val();
            return scenarioNumber;
        }

        function saveScenarioValues(i, row) {
            //debugger;
            row = $(row);

            var myScenario = new scenario();

            myScenario.Id = row.data("id");

            myScenario.SalaryReviewAnalysisId = $('#salaryReviewAnalysisId');

            //            var scenarioNumber = row.find("#scenarioNumber").html();
            //            var parsedNumber = $.parseNumber(scenarioNumber, { format: "##0.", locale: "us" }) * 1;
            //            myScenario.ScenarioNumber = parsedNumber;
            myScenario.ScenarioNumber = getScenarioNumber(row);

            var ddlSelectionType = row.find("select");
            var selectionTypeOptions = ddlSelectionType.val();
            myScenario.SelectionTypeOptions = selectionTypeOptions;

            var hiddenSelectionType = row.find("#selectionType");
            myScenario.SelectionType = hiddenSelectionType.val();

            var percentIncrease = row.find(".percent input").val();
            percentIncrease = $.parseNumber(percentIncrease, { format: "##.00", locale: "us" }) * 1;
            myScenario.PercentIncrease = percentIncrease;

            var salaryAmount = row.find(".currency input").val();
            salaryAmount = $.parseNumber(salaryAmount, { format: "#######.00", locale: "us" }) * 1;
            myScenario.SalaryAmount = salaryAmount;

            var chkboxApproved = row.find("input[type='checkbox']");
            var approved = (chkboxApproved[0].checked);
            myScenario.Approved = approved;

            scenarios[i] = myScenario;

        };

        // Helper when given an index, i.e., the current number of scenarios in the analysis,
        // build the data array used to "drive" the new scenario builder template.
        function buildScenarioDataArray(scenarioIndex) {
            //debugger;
            //var scenarioIndex = 0;
            var alternatingClass = scenarioIndex % 2 ? "even" : "odd"
            var scenarioNumber = scenarioIndex + 1;
            var selectionType = "";
            var data = { dataId: "new_" + scenarioNumber, alternatingClass: alternatingClass, scenarioNumber: scenarioNumber, selectionTypeOptions: defaultSelectionTypeOptions, i: scenarioIndex, percentIncrease: "0", salaryAmount: oldSalary, Id: 0, selectionType: selectionType, salaryReviewAnalysisId: $('#salaryReviewAnalysisId').val(), approved: false };
            return data;
        }
        // Calculate and update the PercentIncrease and SalaryAmount when an individual scenario"s
        // ddlSelectionType is changed:
        $("#ddlSelectionType").live("change", function (e) {

            // Note: The value of the newly selected item from the drop-down list is the new salary amount.
            var newSalary = $(this).val();
            // Reset it back to the old salary if "None" was selected.
            if (newSalary == "") {
                newSalary = oldSalary;
            }

            // This is the text of the newly selected item, i.e. "Step 6.0", etc:
            var selectedText = $(this).find(':selected').text();

            // This is the numerical percentage with a whole bunch of zeros.
            var percentIncrease = (newSalary - oldSalary) / oldSalary;

            // Update the values displayed in Criteria, Percent Increase, and New Annual Salary:
            updateDisplayedValues(this, percentIncrease, newSalary, false);

            // This was the original logic I used, which was a lot more work (and java script)!
            // It has all been replaced by a call to the previous method.
            //            var row = $(this).parents("tr");
            //            var rowId = row.data("id");
            //            var rowContents = row[0];
            //            var aData = dtable.fnGetData(rowContents);

            //            // This is the percentage with only 2 decimal places converted to a string:
            //            //var percentIncreaseString = percentIncrease//; .toFixed(2).toString() + "%";

            //            // This logic gets the entire html structure, meaning the html created by
            //            //  <div class="editor-field">
            //            //      <input id="tbPercentIncrease" type="text" value="1.00%" name="SalaryReviewAnalysis.Scenarios[0].PercentIncrease" data-val-number="The field PercentIncrease must be a number." data-val="true">
            //            //  </div>
            //            // , which contains the old percentage increase value (string).

            //            // From that we can get the old percentage increase value less the space and percent sign:
            //            //var myOldPercentIncreaseString = getOldValueString(aData, "PercentIncrease");

            //            // Then we can replace the old percentage increase value with the new percentage increase value, by substituting in
            //            // back in the html.  If we did not use this approach we would display only the new percent increase string value and be missing
            //            // the input field, i.e. text box, and all the other formatting.
            //            //var newPercentIncreaseHtml = aData[oColumnNames["PercentIncrease"]].replace(myOldPercentIncreaseString, percentIncreaseString);
            //            var tbPercentIncrease = row.find(".percent");
            //            tbPercentIncrease.val(percentIncrease);
            //            tbPercentIncrease.formatNumber({ format: "#0.00%", locale: "us" });
            //            // We take a similar approach to finding the AnnualSalary html and updating it with the new Annual Salary amount:
            //            //-----------------------------------------------------------------

            //            //            var myOldAnnualSalaryString = getOldValueString(aData, "SalaryAmount");
            //            //            var newAnnualSalaryHtml = aData[oColumnNames["SalaryAmount"]].replace(myOldAnnualSalaryString, newSalary.toString());
            //            var tbSalaryAmount = row.find(".currency");
            //            tbSalaryAmount.val(newSalary);
            //            tbSalaryAmount.formatCurrency();
            //            //-----------------------------------------------------------------

            //            // Write the updated html results back out again:
            //            //            dtable.fnUpdate(newPercentIncreaseHtml, rowContents, oColumnNames["PercentIncrease"], false, false); //False parameters to not redraw until second call
            //            //            dtable.fnUpdate(newAnnualSalaryHtml, rowContents, oColumnNames["SalaryAmount"], false, false); //False parameters to not redraw until second call

            //            // Lastly, format the new Annual Salary Amount. because we"re using TextBoxFor since EditorFor does not
            //            // have an overloaded method that allows setting "class = "currency"" as an html attribute; otherwise,
            //            // we"d have to write our own currency formatting routine to handle the formatting.

            //            //$(".currency").formatCurrency();

            e.preventDefault();
        });

        // Clear all but the checkbox that was just selected,
        // and set the date approved if it was not previously set.
        // --or --
        // Clear the date approved if a checkbox was de-selected, meaning that there
        // is not longer an approved scenario for it to correspond to:
        function toggleCheckboxesAndSetDateApproved(checkbox) {
            //debugger;
            var checked = $(checkbox)[0].checked;
            var checkboxes = $('#scenarios').find("#cbxApproved");

            if (checked) {
                checkboxes.each(function (i, val) {
                    // clear all checkboxes
                    val = $(val)[0];
                    val.checked = false;

                });
                // since we cleared all the checkboxes,
                // recheck the one that was selected before we cleared them all:
                checkbox[0].checked = true;

                // if a date approved was not already set, set it to today's date:
                var tbDateApproved = $("#SalaryReviewAnalysis_DateApproved");
                if (tbDateApproved.val() == "") {
                    var currentTime = new Date();
                    tbDateApproved.val($.format.date(currentTime, "MM/dd/yyyy"));
                }
            }
            else {
                // the approved scenario has been de-selected, so also clear the data approved:
                $("#SalaryReviewAnalysis_DateApproved").val("");
            }

        }

        $("#cbxApproved").live("change", function (e) {
            var checkbox = $(this);
            toggleCheckboxesAndSetDateApproved(checkbox);
            return false;

        });

        // Calculate and update the SalaryAmount when an individual scenario"s
        // PercentIncrease is changed:
        //        $("#tbPercentIncrease").live("change", function (e) {
        $(".percent input").live("change", function (e) {
            //debugger;
            //var number = e.currentTarget.value; // This works to get the value that was just entered.
            var percentIncrease = $(this).val(); // This appears to also work to get the value, but I don"t think it worked for my drop-down list.

            if (percentIncrease.search("%") > -1) {
                // Then the number entered was a percent, so parse accordingly:
                percentIncrease = $.parseNumber(percentIncrease, { format: "##.00%", locale: "us" });
            }
            else {
                // Otherwise only a number, meaning 2 for 2%, etc, so convert it back to a decimal:
                percentIncrease = $.parseNumber(percentIncrease, { format: "##.00", locale: "us" }) / 100;
            }

            // calculate the amount of the salary increase based on the percent entered:
            var raiseAmount = oldSalary * percentIncrease;
            // add it to the old salary to determine the new salary:
            var newSalary = raiseAmount + (oldSalary * 1);  // Note: the "* 1" is a shortcut to convert a string into a number.

            // Update the values displayed in Criteria, Percent Increase, and New Annual Salary:
            updateDisplayedValues(this, percentIncrease, newSalary, true);

            e.preventDefault();
        });

        // Calculate and update the PercentIncrease when an individual scenario"s
        // SalaryAmount is changed:
        $(".currency input").live("change", function (e) {
            //var number = e.currentTarget.value; // This works to get the value that was just entered.
            var newSalary = $(this).val(); // This appears to also work to get the value, but I don"t think it worked for my drop-down list.

            if (newSalary.search("$") > -1) {
                // Then the number entered was a salary amount, so parse accordingly:
                newSalary = $.parseNumber(newSalary, { format: "$#,###,###.00", locale: "us" });
            }
            else {
                // Otherwise only a number, meaning 2 for $2, etc, so convert it back to a decimal:
                newSalary = $.parseNumber(newSalary, { format: "#######.00", locale: "us" });
            }

            var percentIncrease = (newSalary - oldSalary) / (oldSalary * 1);

            // Update the values displayed in Criteria, Percent Increase, and New Annual Salary:
            updateDisplayedValues(this, percentIncrease, newSalary, true);

            e.preventDefault();
        });

        // Reset a given scenario"s values back to those
        // pulled from the database.
        $("#btnResetScenario").live("click", function (e) {
            //debugger;
            var row = $(this).parents("tr");

            //            restoreDefaultSelection(row);

            //            restorePercentIncrease(row, aData);

            //            restoreSalaryAmount(row, aData);

            //            var scenarioNumberString = row.find("#scenarioNumber").html();
            //            var scenarioNumber = $.parseNumber(scenarioNumberString, { format: "##0.", locale: "us" }) * 1;
            var scenarioNumber = getScenarioNumber(row);
            var scenario = scenarios[scenarioNumber - 1];  // retrieve the scenario's original values.

            updateDisplayedRowValues(row, scenario.PercentIncrease, scenario.SalaryAmount, scenario.SelectionType, scenario.Approved);

            e.preventDefault();
        });

        // Add a scenario to the scenarios list of the Analysis being edited:
        $("#btnAddAnotherScenario").live("click", function (e) {
            //debugger;
            $("#scenarioTemplate").template("scenarioTemplate");

            //var n = $("#scenarios tbody>tr").length;
            var n = scenarios.length;
            var myData = buildScenarioDataArray(n);
            var newRow = $.tmpl("scenarioTemplate", myData);
            $(".percent input", newRow).val("0").formatNumber({ format: "#0.00%", locale: "us" });
            $(".currency input", newRow).val(oldSalary).formatCurrency();
            newRow.appendTo("#scenarios");
            //     or       newRow.appendTo("#scenarios");

            saveScenarioValues(n, newRow);

            e.preventDefault();
            return false;
        });

        // Delete a scenario from the scenarios list of the Analysis being edited:
        $("#btnDeleteScenario").live("click", function (e) {
            // Delete a scenario from the web page"s scenarios array.
            // Note that the scenario is not actually deleted until
            // the analysis has been saved.

            var row = $(this).parents("tr");
            //            var scenarioNumber = row.find("#scenarioNumber").html();
            //            var parsedNumber = $.parseNumber(scenarioNumber, { format: "##0.", locale: "us" }) * 1;
            var scenarioNumber = getScenarioNumber(row);
            var answer = confirm("Are you sure you want to delete this scenario #" + scenarioNumber.toString() + " ?");
            if (!answer) return false;

            // if you delete the "approved" scenario, then you need to clear date approved:
            var chkboxApproved = row.find("input[type='checkbox']");
            if (chkboxApproved[0].checked == true) {
                // clear date approved because it is not possible to have
                // more than one approved checkbox selected at a single time:
                $("#SalaryReviewAnalysis_DateApproved").val("");
            }
            // remove the row:
            row.remove();

            var scenarioIndex = scenarioNumber - 1;
            scenarios[scenarioIndex] = null;  // set the corresponding object to null as opposed to removing it.
            // that way we can avoid duplicate scenario numbers because of multiple deletes and inserts, etc.

            e.preventDefault();
        });

        // Sub worker method to update the values displayed in Criteria, Percent Increase, and New Annual Salary:
        function updateDisplayedRowValues(row, percentIncrease, salaryAmount, selectionType, isApproved) {
            //debugger;
            //var row = $(row);
            // var rowId = row.data("id");
            //var rowContents = row[0];
            //var aData = dtable.fnGetData(rowContents);

            // Handle the percent increase:
            var tbPercentIncrease = row.find(".percent input");
            tbPercentIncrease.val(percentIncrease);
            // Set the value to its decimal equivalent so the x 100 multiplication is not
            // applied twice, i.e., once manually by the user and once by the formatter.
            // Format the value as a percentage and add the percent sign:
            tbPercentIncrease.formatNumber({ format: "#0.00%", locale: "us" });

            // Do similarly for the new salary amount:
            var tbSalaryAmount = row.find(".currency input");
            tbSalaryAmount.val(salaryAmount);
            // Format the new Annual Salary Amount. This does not happen automatically because we"re using TextBoxFor
            // since EditorFor does not appear to have an overloaded method that allows setting "class = "currency""
            // as an html attribute; otherwise, we"d have to write our own currency formatting routine to handle the
            // formatting.  However, the formatNumber jQuery plug-in I added for percentage might work for this as well.
            tbSalaryAmount.formatCurrency();

            // Reset the criteria drop-down list back to what it when it was loaded from the database initially:
            // Note that I need to reset it based on the Text being displayed, not the value.
            var ddlSelectionTypes = row.find('#ddlSelectionType');
            if (typeof selectionType === 'boolean') {
                if (selectionType == true) {
                    ddlSelectionTypes.val("");
                }
                // otherwise do nothing because this method call was the result of a
                // new value being selected from the drop-down list.
            }
            else {
                if (selectionType == "") {
                    // myIndex = 0;
                    ddlSelectionTypes.val("");
                }
                else {
                    // 1. Retrieve the index for the text value from the previously loaded text value/option's index dictionary:
                    var myIndex = selectionTypeTextDictionary[selectionType];
                    // 2. Find the select list control:
                    ddlSelectionTypes = row.find('#ddlSelectionType');
                    // 3. Reset the index back to its original value:
                    // Note that this doesn't seem to have any effect with FF v6.01.
                    ddlSelectionTypes.selectedIndex = myIndex;
                    // 4. Reset the options[i].selected to true:
                    // Note that this is what actually resets the control in FF v6.01:
                    ddlSelectionTypes[0].options[myIndex].selected = true;
                    // The following also works in FF v6.01:
                    //row.find("select option")[myIndex].selected = true;
                }
            }

            var chkboxApproved = row.find("input[type='checkbox']");

            if (typeof isApproved === 'boolean') {
                if (isApproved == true) {
                    chkboxApproved[0].checked = true;
                    // clear other check boxes and populate date approved if it is not set
                    toggleCheckboxesAndSetDateApproved(chkboxApproved);
                }
                else {
                    //else isApproved == false
                    if (chkboxApproved[0].checked == true) {
                        // clear date approved because it is not possible to have
                        // more than one approved checkbox selected at a single time:
                        $("#SalaryReviewAnalysis_DateApproved").val("");
                    }
                    chkboxApproved[0].checked = false;
                }
            }
            // Otherwise, leave untouched.
        }

        // Worker method to update the values displayed in Criteria, Percent Increase, and New Annual Salary:
        // Note: Reset selection can be true, false, or an option value.
        function updateDisplayedValues(selector, percentIncrease, salaryAmount, resetSection) {
            // get the current row and its data array:
            var row = $(selector).parents("tr");

            updateDisplayedRowValues(row, percentIncrease, salaryAmount, resetSection, null);
        }

        // Worker method that when given a dataTable row,
        // reset the select list back to the value at index 0.
        function resetSelectionType(row) {
            var selectctl = row.find("select");
            selectctl.val("");
        }

        // Worker method that when given a dataTable row,
        // restore its value back to the one originally
        // pulled from the database.
        function restoreDefaultSelection(row) {
            var selectctl = row.find("select");
            var oldSelectedValue = getOldSelectedValue(row);
            selectctl.val(oldSelectedValue);
        }

        // Helper method that when given a dataTable"s data array, and
        // the column"s sName, parse out the old value
        // at the sNamed cell position, and return it:
        function getOldValueString(aData, stringName) {
            // Find named the substring within the html:
            var myOldStringBegin = aData[oColumnNames[stringName]].search('value="');
            var myOldStringEnd = aData[oColumnNames[stringName]].search("' type='text'");
            var myOldStringLength = myOldStringEnd - myOldStringBegin;
            var myOldString = aData[oColumnNames[stringName]].substring(myOldStringBegin + 7, myOldStringBegin + myOldStringLength);

            return myOldString;
        }

        // Helper method that when given a row search through
        // the select list"s options for the default selected
        // item and return it; otherwise, the value of the item
        // at index 0 if there was no default selection.
        function getOldSelectedValue(row) {
            var selectctl = row.find("select");
            selectctl0 = selectctl[0];
            var options = selectctl0.options;
            var i;
            var defaultFound = false;
            for (i = 0; i < options.length; i++) {
                var option = options[i];
                if (option.defaultSelected == true) {
                    defaultFound = true;
                    break;
                }
            }

            var oldSelectedIndex = 0;
            if (defaultFound == true) {
                oldSelectedIndex = i;
            };

            return options[oldSelectedIndex].value;
        }

        // Worker method that when given a scenario row and dataTable data array,
        // restore the PercentIncrease data value back to
        // its original value.  Not that this is not necessarily 0,
        // but the scenario"s percent increase as pulled from the database.
        function restorePercentIncrease(row, aData) {
            var percentIncrease = row.find(".percent");
            var percentIncreaseString = getOldValueString(aData, "PercentIncrease");
            percentIncrease.val(percentIncreaseString);
            percentIncrease.formatNumber({ format: "#0.00%", locale: "us" });
        }

        // Worker method that when given a scenario row and dataTable data array,
        // restore the SalaryAmount data value back to
        // its original value.  Not that this is not necessarily the employee"s present salary amount,
        // but the scenario"s salary amount as pulled from the database.
        function restoreSalaryAmount(row, aData) {
            var salaryAmount = row.find(".currency");
            var salaryAmountString = getOldValueString(aData, "SalaryAmount");
            salaryAmount.val(salaryAmountString);
            salaryAmount.formatCurrency();
        }

        // Helper method to parse a boolean string value into a boolean;
        function parseBool(value) {
            return (typeof value === "undefined") ?
		   false :
            // trim using jQuery.trim()'s source
		   value.replace(/^\s+|\s+$/g, "").toLowerCase() === "true";
        }

        // test object to store old scenario values in
        function scenario() {
            this.Id = 0;
            this.SalaryReviewAnalysisId = 0;
            this.ScenarioNumber = 0;
            this.SelectionType = "None";
            this.SelectionTypeOptions = defaultSelectionTypeOptions;
            this.PercentIncrease = 0;
            this.SalaryAmount = oldSalary;
            this.Approved = false;
        }
    })
</script>
<script id="scenarioTemplate" type="text/x-jquery-tmpl">
<tr data-id=${dataId} class=${alternatingClass}>
	<th id="scenarioNumber" class=" sorting_1">
		<input type="hidden" id="hiddenScenarioNumber" value=${scenarioNumber} name="SalaryReviewAnalysis.Scenarios[${i}].ScenarioNumber">${scenarioNumber}.</th>
	<td>
		<div class="editor-field">
			<select name="SalaryReviewAnalysis.Scenarios[${i}].SelectionType" id="ddlSelectionType">{{html selectionTypeOptions}}</select>
		</div>
	</td>
	<td>
		<div class="editor-field percent">
			<input type="text" value=${percentIncrease} name="SalaryReviewAnalysis.Scenarios[${i}].PercentIncrease" id="tbPercentIncrease" data-val-number="The field PercentIncrease must be a number." data-val="true" class="percent">
		</div>
	</td>
	<td>
		<div class="editor-field currency">
			<input type="text" value=${salaryAmount} name="SalaryReviewAnalysis.Scenarios[${i}].SalaryAmount" id="tbSalaryAmount" data-val-number="The field SalaryAmount must be a number." data-val="true" class="currency">
		</div>
	</td>
	<td>
		<div class="editor-field">
			<input type="checkbox" value="true" name="SalaryReviewAnalysis.Scenarios[${i}].Approved" id="cbxApproved" >
            <input type="hidden" value="false" name="SalaryReviewAnalysis.Scenarios[${i}].Approved" >
		</div>
	</td>
	<td>
		<input type="hidden" id="scenarioId" value=${Id} name="SalaryReviewAnalysis.Scenarios[${i}].Id">
		<input type="hidden" id="selectionType" name="SalaryReviewAnalysis.Scenarios[${i}].SelectionType" value=${selectionType} >
		<input type="hidden" id="salaryReviewAnalysisId" value=${salaryReviewAnalysisId} name="SalaryReviewAnalysis.Scenarios[${i}].SalaryReviewAnalysisID">
		<input type="submit" id="btnResetScenario" value="Reset" name="btnReset">&nbsp;
			<a class="buttons" id="btnDeleteScenario"><img class="delete_button" alt="Delete" src="../../Images/delete.png"></a>
	</td>
</tr>
</script>
<div>
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.SalaryReviewAnalysis.ReferenceNumber)
    <h2>
        Salary Review Analysis</h2>
    @if (Model.ProposedTitle != null)
    {
        <center>
            <span id="proposed-title" style="font-weight: bold;">Proposed Title: </span>
            @Model.ProposedTitle.TitleCode_Name</center>
    }
    @Html.HiddenFor(e => e.SraEmployee.PayRate, new { id = "oldSalary" })
    @Html.HiddenFor(e => e.SraEmployee.PkEmployee)
    @Html.HiddenFor(x => x.SalaryReviewAnalysis.IsReclass)
    @Html.HiddenFor(x => x.SalaryReviewAnalysis.Title.TitleCode)
    <table>
        <tr>
            @*<td>
                    -- Salary Review Analysis has yet to be saved --
                </td>*@
            <th>
                Reference Number
            </th>
            <th>
                Date Initiated
            </th>
            <th>
                Date Approved
            </th>
            <th>
                Originating Department
            </th>
            <th>
                Initiated By (Reviewer&nbsp;Name)
            </th>
        </tr>
        <tr>
            @if (String.IsNullOrEmpty(Model.SalaryReviewAnalysis.ReferenceNumber))
            {
                <td style="font-style: italic">
                    Unsaved
                </td>
            }
            else
            {
                <td>
                    @Html.HiddenFor(x => x.SalaryReviewAnalysis.Id, new { id = "salaryReviewAnalysisId" })
                    @Model.SalaryReviewAnalysis.ReferenceNumber
                </td>
            }
            <td>
                @String.Format("{0:MM/dd/yyyy}", Model.SalaryReviewAnalysis.DateInitiated)
            </td>
            <td>
                @Html.EditorFor(x => x.SalaryReviewAnalysis.DateApproved)
            </td>
            <td>
                <div class="editor-field">
                    @Html.DropDownListFor(x => x.SalaryReviewAnalysis.OriginatingDepartment.Id,
                        new SelectList(Model.PossibleOriginatingDepartments.OrderBy(x => x.Name),
                                     "Id",
                                     "Name_DepartmentNumber",
                                               Model.SalaryReviewAnalysis.OriginatingDepartment != null ? Model.SalaryReviewAnalysis.OriginatingDepartment.Id : string.Empty),
                            null, new { id = "originatingDepartmentDropDown" }
                            )
                </div>
            </td>
            <td>
                @Html.HiddenFor(x => x.SalaryReviewAnalysis.InitiatedByReviewerName)
                @Model.SalaryReviewAnalysis.InitiatedByReviewerName
            </td>
        </tr>
    </table>
    <table id="scenarios">
        <thead>
            <tr>
                <th>
                    Scenario No.
                </th>
                <th>
                    Criteria
                </th>
                <th>
                    Percent Increase (%)
                </th>
                <th>
                    New Annual Salary ($)
                </th>
                <th>
                    Approved
                </th>
                <th>
                    &nbsp
                </th>
            </tr>
        </thead>
        <tbody>
            @{
                var len = Model.SalaryReviewAnalysis.Scenarios.Count;
                for (var i = 0; i < len; i++)
                {

                <tr data-id="@Model.SalaryReviewAnalysis.Scenarios[i].Id">
                    <th id="scenarioNumber">
                        @Html.HiddenFor(x => x.SalaryReviewAnalysis.Scenarios[i].ScenarioNumber, new { id = "hiddenScenarioNumber" })
                        @Model.SalaryReviewAnalysis.Scenarios[i].ScenarioNumber.
                    </th>
                    <td>
                        @{
                    string selectionTypeText = Model.SalaryReviewAnalysis.Scenarios[i].SelectionType;
                    if (String.IsNullOrEmpty(selectionTypeText)) { selectionTypeText = "None"; }
                        }
                        <div class="editor-field">
                            @Html.DropDownListFor(x => x.SalaryReviewAnalysis.Scenarios[i].SelectionType,
                      new SelectList(Model.CriteriaList, "Value", "Key", Model.CriteriaList[selectionTypeText])
                            , null, new { id = "ddlSelectionType" })
                        </div>
                    </td>
                    <td>
                        <div class="editor-field percent">
                            @*@Html.TextBoxFor(x => x.SalaryReviewAnalysis.Scenarios[i].PercentIncrease, new { id = "tbPercentIncrease", @class = "percent" })*@
                            @Html.EditorFor(x => x.SalaryReviewAnalysis.Scenarios[i].PercentIncrease)
                        </div>
                    </td>
                    <td>
                        <div class="editor-field currency">
                            @*@Html.TextBoxFor(x => @Model.SalaryReviewAnalysis.Scenarios[i].SalaryAmount, new { id = "tbSalaryAmount", @class = "currency" })*@
                            @Html.EditorFor(x => x.SalaryReviewAnalysis.Scenarios[i].SalaryAmount)
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @Html.CheckBox(@"SalaryReviewAnalysis.Scenarios[" + i + "].Approved", (@Model.SalaryReviewAnalysis.Scenarios[i].Approved != null ? (bool)@Model.SalaryReviewAnalysis.Scenarios[i].Approved : false), new { id = "cbxApproved" })
                        </div>
                    </td>
                    <td>
                        @Html.HiddenFor(x => x.SalaryReviewAnalysis.Scenarios[i].Id, new { id = "scenarioId" })
                        @Html.HiddenFor(x => x.SalaryReviewAnalysis.Scenarios[i].SelectionType, new { id = "selectionType" })
                        @Html.HiddenFor(x => x.SalaryReviewAnalysis.Scenarios[i].SalaryReviewAnalysisID, new { id = "salaryReviewAnalysisId" })
                        <input type="submit" name="btnReset" value="Reset" id="btnResetScenario" />&nbsp;
                        <a id="btnDeleteScenario" class="buttons">
                            <img src="../../Images/delete.png" alt="Delete" class="delete_button" /></a>
                    </td>
                </tr> }
            }
        </tbody>
        <tfoot>
            @{
                <tr>
                    <th>
                        @(Model.IsDepartmentUser ? "Comments:" : "Department Comments:")
                    </th>
                    <td colspan="5">
                        @if (Model.IsDepartmentUser)
                        {
                            <div class="editor-field">
                                @Html.TextAreaFor(x => x.SalaryReviewAnalysis.DepartmentComments, new
                           {
                               rows = "2",
                               cols = "60"
                           })
                            </div>
                            @Html.HiddenFor(x => x.SalaryReviewAnalysis.DeansOfficeComments)
                        }
                        else
                        {
                            @Html.HiddenFor(x => x.SalaryReviewAnalysis.DepartmentComments)
                        }
                    </td>
                </tr>
            }
            @if (!Model.IsDepartmentUser)
            {
                <tr>
                    <th>
                        Dean"s Office Comments:
                    </th>
                    <td colspan="5">
                        <div class="editor-field">
                            @Html.TextAreaFor(x => x.SalaryReviewAnalysis.DeansOfficeComments, new { rows = "2", cols = "60" })
                        </div>
                    </td>
                </tr>
            }
            <tr>
                <td colspan="6">
                    <center>
                        <a id="btnAddAnotherScenario" style="text-decoration: underline;">Add another scenario</a></center>
                    <br />
                </td>
            </tr>
        </tfoot>
    </table>
</div>