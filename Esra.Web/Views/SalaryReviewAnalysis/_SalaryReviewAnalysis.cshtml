@model Esra.Web.Models.SalaryReviewAnalysisEditorViewModel
<script type="text/javascript">

    $(document).ready(function () {
        // We don't really need all the features of jQUery data table, but we're using it because
        // it allows easier access to the table cell's data.

        var dtable = $('#scenarios').dataTable({
            "bProcessing": true,
            //"bServerSide": true,
            "bJQueryUI": true,
            "aLengthMenu": [[10, 25, 50, -1], [10, 25, 50, "All"]],  // This allows for the "display all" records feature.
            "sPaginationType": "full_numbers",
            "aaSorting": [[0, 'asc']], // Change default sort to scenario number; otherwise it sorts by column 0.
            "aoColumns": [
                                                            { "sName": "ScenarioNumber" },  // "bVisible": false "hides" the column from the user.
                                                            {"sName": "SelectionType" },
                                                            { "sName": "PercentIncrease", "sType": "percent" }, // "sName": HomeDepartment gives the column a name in the oSettings.aoColumns[] array.  This is used in _ExportToExcel.
                                                            {"sName": "SalaryAmount", "sType": "currency" },
                                                            { "sName": "Approved" },
                                                            { "sName": "Reset-Delete", "bSortable": false }
                                                        ]
        });

        // The old salary needed to be included as a hidden field
        // because the table cell that contains it had an "/n", and currency formatting making converting it back
        // to a numerical value more difficult than just getting the value from a hidden field.
        //
        // User's current annual salary from the hidden salary field.
        var oldSalary = $('#oldSalary')[0].value;

        // All of this logic gives us the ability to use the field names instead of having to memorize their
        // cell positions in the table.
        // I put it here so it only needed to be done once.
        var oSettings = dtable.fnSettings();
        var oColumns = oSettings.aoColumns;
        var i;
        var oColumnNames = new Array();
        for (i = 0; i < oColumns.length; i++) {
            oColumnNames[oColumns[i].sName] = i;
        };

        // This adds a date picker to the DataApproved field:
        $(function () {
            $("#SalaryReviewAnalysis_DateApproved").datepicker();
        });

        $('.currency').formatCurrency();  // This is necessary because EditorFor needed to be replaced with TextBoxFor as editor for
        // does not include an overload for html attributes, and TextAreaFor does.  The html attributes was necessary in order to
        // include a new { class = "currency" } that is used for adding the $, comma(s), and decimal point to the newly updated
        // SalaryAmount.  However, this removed the currency formatting of the initial value, so the call to format currency
        // needed to be added here to restore the currency formatting formerly provided by the Model (or domain) class.

        // Similarly, format the percent increases by multiplying by 100 and adding the percent signs:
        $(this).find('.percent').formatNumber({ format: "#0.00%", locale: "us" });

        // This takes care of updating the PercentIncrease and SalaryAmount when an individual scenario's
        // ddlSelectionType is changed:
        $('#ddlSelectionType').live('change', function (e) {
            //debugger;

            // Note: The value of the newly selected item from the drop-down list is the new salary amount.
            var newSalary = e.currentTarget.value;  // e.currentTarget.value has the value just selected in the drop-down list!

            var row = $(this).parents("tr");
            var rowId = row.data("id");
            var rowContents = row[0];
            var aData = dtable.fnGetData(rowContents);

            // This is the numerical percentage with a whole bunch of zeros.
            var percentIncrease = (newSalary - oldSalary) / oldSalary * 100;

            // This is the percentage with only 2 decimal places converted to a string:
            var percentIncreaseString = percentIncrease.toFixed(2).toString() + "%";

            // This logic gets the entire html structure, meaning the html created by
            //  <div class="editor-field">
            //      <input id="tbPercentIncrease" type="text" value="1.00%" name="SalaryReviewAnalysis.Scenarios[0].PercentIncrease" data-val-number="The field PercentIncrease must be a number." data-val="true">
            //  </div>
            // , which contains the old percentage increase value (string).

            // From that we can get the old percentage increase value less the space and percent sign:
            var myOldPercentIncreaseString = getOldValueString(aData, "PercentIncrease");

            // Then we can replace the old percentage increase value with the new percentage increase value, by substituting in
            // back in the html.  If we did not use this approach we would display only the new percent increase string value and be missing
            // the input field, i.e. text box, and all the other formatting.
            var newPercentIncreaseHtml = aData[oColumnNames["PercentIncrease"]].replace(myOldPercentIncreaseString, percentIncreaseString);

            // We take a similar approach to finding the AnnualSalary html and updating it with the new Annual Salary amount:
            //-----------------------------------------------------------------

            var myOldAnnualSalaryString = getOldValueString(aData, "SalaryAmount");
            var newAnnualSalaryHtml = aData[oColumnNames["SalaryAmount"]].replace(myOldAnnualSalaryString, newSalary.toString());

            //-----------------------------------------------------------------

            // Write the updated html results back out again:
            dtable.fnUpdate(newPercentIncreaseHtml, rowContents, oColumnNames["PercentIncrease"], false, false); //False parameters to not redraw until second call
            dtable.fnUpdate(newAnnualSalaryHtml, rowContents, oColumnNames["SalaryAmount"], false, false); //False parameters to not redraw until second call

            // Lastly, format the new Annual Salary Amount. because we're using TextBoxFor since EditorFor does not
            // have an overloaded method that allows setting 'class = "currency"' as an html attribute; otherwise,
            // we'd have to write our own currency formatting routine to handle the formatting.

            $('.currency').formatCurrency();

            e.preventDefault();
        });

        $('#tbPercentIncrease').live('change', function (e) {
            //debugger;

            //var number = e.currentTarget.value; // This works to get the value that was just entered.
            var number = $(this).val(); // This appears to also work to get the value, but I don't think it worked for my drop-down list.

            if (number.search("%") > -1) {
                // Then the number entered was a percent, so parse accordingly:
                number = $.parseNumber(number, { format: "##.00%", locale: "us" });
            }
            else {
                // Otherwise only a number, meaning 2 for 2%, etc, so convert it back to a decimal:
                number = $.parseNumber(number, { format: "##.00", locale: "us" }) / 100;
            }

            // calculate the amount of the salary increase based on the percent entered:
            var raiseAmount = oldSalary * number;
            // add it to the old salary to determine the new salary:
            var newSalary = raiseAmount + (oldSalary * 1);  // the "* 1" is a shortcut to convert a string into a number.

            // get the current row and its data array:
            var row = $(this).parents("tr");
            var rowId = row.data("id");
            var rowContents = row[0];
            var aData = dtable.fnGetData(rowContents);

            // Here we convert it from a decimal, back to a percent (string) and add the percent sign:
            var percentIncreaseString = (number * 100).toFixed(2).toString() + "%";

            // Get the old percent increase from the html and replace it with the new percent increase:
            var myOldPercentIncreaseString = getOldValueString(aData, "PercentIncrease");
            var newPercentIncreaseHtml = aData[oColumnNames["PercentIncrease"]].replace(myOldPercentIncreaseString, percentIncreaseString);

            // Do similarly for the old and new salary amount:
            var myOldAnnualSalaryString = getOldValueString(aData, "SalaryAmount");
            var newAnnualSalaryHtml = aData[oColumnNames["SalaryAmount"]].replace(myOldAnnualSalaryString, newSalary.toString());

            // Write the updated values and the html results back out again:
            dtable.fnUpdate(newPercentIncreaseHtml, rowContents, oColumnNames["PercentIncrease"], false, false); //False parameters to not redraw until second call
            dtable.fnUpdate(newAnnualSalaryHtml, rowContents, oColumnNames["SalaryAmount"], false, false); //False parameters to not redraw until second call

            // Reset the criteria drop-down list back to "None" since a percentage was entered instead:
            var selectctl = row.find("select");
            selectctl.val("");

            // Lastly, format the new Annual Salary Amount. because we're using TextBoxFor since EditorFor does not
            // have an overloaded method that allows setting 'class = "currency"' as an html attribute; otherwise,
            // we'd have to write our own currency formatting routine to handle the formatting.  However, the formatNumber
            // jQuery plug-in I added for percentage might work for this as well.
            $('.currency').formatCurrency();

            e.preventDefault();
        });

        // Given a dataTable's data array, parse out the old string value of at the named cell position,
        // and return it:
        function getOldValueString(aData, stringName) {
            // Find named the string within the html:
            //-----------------------------------------------------------------
            debugger;
            var myOldStringBegin = aData[oColumnNames[stringName]].search('value="');
            var myOldStringEnd = aData[oColumnNames[stringName]].search('" type="text"');
            var myOldStringLength = myOldStringEnd - myOldStringBegin;
            var myOldString = aData[oColumnNames[stringName]].substring(myOldStringBegin + 7, myOldStringBegin + myOldStringLength);
            return myOldString;
        }

    })
</script>
<div>
    @Html.AntiForgeryToken()
    @Html.HiddenFor(x => x.SalaryReviewAnalysis.ReferenceNumber)
    <h2>
        Salary Review Analysis</h2>
    @if (Model.ProposedTitle != null)
    {
        <center>
            <span id="proposed-title" style="font-weight: bold;">Proposed Title: </span>
            @Model.ProposedTitle.TitleCode_Name</center>
    }
    @Html.HiddenFor(x => x.SraEmployee.PayRate, new { id = "oldSalary" })
    <table>
        @if (String.IsNullOrEmpty(Model.SalaryReviewAnalysis.ReferenceNumber))
        {
            <tr>
                <td>
                    -- Salary Review Analysis has yet to be saved --
                </td>
            </tr>
        }
        else
        {
            <tr>
                <th>
                    Reference Number
                </th>
                <th>
                    Date Initiated
                </th>
                <th>
                    Date Approved
                </th>
                <th>
                    Initiated By (Reviewer&nbsp;Name)
                </th>
            </tr>
            <tr>
                <td>
                    @Model.SalaryReviewAnalysis.ReferenceNumber
                </td>
                <td>
                    @String.Format("{0:MM/dd/yyyy}", Model.SalaryReviewAnalysis.DateInitiated)
                </td>
                <td>
                    @Html.EditorFor(x => x.SalaryReviewAnalysis.DateApproved)
                </td>
                <td>
                    @Model.SalaryReviewAnalysis.InitiatedByReviewerName
                </td>
            </tr>

        }
    </table>
    <table id="scenarios">
        <thead>
            <tr>
                <th>
                    Scenario No.
                </th>
                <th>
                    Criteria
                </th>
                <th>
                    Percent Increase (%)
                </th>
                <th>
                    New Annual Salary ($)
                </th>
                <th>
                    Approved
                </th>
                <th>
                    &nbsp
                </th>
            </tr>
        </thead>
        <tbody>
            @{

                var len = Model.SalaryReviewAnalysis.Scenarios.Count;
                for (var i = 0; i < len; i++)
                {

                <tr data-id="s-@Model.SalaryReviewAnalysis.Scenarios[i].Id">
                    <th>
                        @Model.SalaryReviewAnalysis.Scenarios[i].ScenarioNumber.
                    </th>
                    <td>
                        @*@Model.SalaryReviewAnalysis.Scenarios[i].SelectionType<br />*@
                        <div class="editor-field">
                            @Html.DropDownListFor(x => @Model.SalaryReviewAnalysis.Scenarios[i].SelectionType,
                        new SelectList(Model.CriteriaList, "Value", "Key", Model.CriteriaList[Model.SalaryReviewAnalysis.Scenarios[i].SelectionType]),
                  null, new { id = "ddlSelectionType" })
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @* @Html.EditorFor(x => @Model.SalaryReviewAnalysis.Scenarios[i].PercentIncrease)*@
                            @Html.TextBoxFor(x => @Model.SalaryReviewAnalysis.Scenarios[i].PercentIncrease, new { id = "tbPercentIncrease", @class = "percent" })
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @*@Html.EditorFor(x => @Model.SalaryReviewAnalysis.Scenarios[i].SalaryAmount)*@
                            @Html.TextBoxFor(x => @Model.SalaryReviewAnalysis.Scenarios[i].SalaryAmount, new { @class = "currency" })
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @Html.CheckBox(@"SalaryReviewAnalysis.Scenarios[" + i + "].Approved", @Model.SalaryReviewAnalysis.Scenarios[i].Approved)
                        </div>
                    </td>
                    <td>
                        <input type="submit" name="btnReset" value="Reset" id="btnResetScenario" onclick="resetScenario(this)" />&nbsp;
                        <a onclick="return confirm('Are you sure you want to delete this scenario?'); deleteScenario(this);"
                            id="btnDeleteScenario" class="buttons" href="javascript:__doPostBack('btnDelete','')">
                            <img src="../../Images/delete.png" alt="Delete" class="delete_button" /></a>
                    </td>
                </tr>
                }
            }
        </tbody>
        <tfoot>
            @{
                <tr>
                    <th>
                        @(Model.IsDepartmentUser ? "Comments:" : "Department Comments:")
                    </th>
                    <td colspan="5">
                        @if (Model.IsDepartmentUser)
                        {
                            <div class="editor-field">
                                @Html.TextAreaFor(x => x.SalaryReviewAnalysis.DepartmentComments, new
                       {
                           rows = "2",
                           cols = "60"
                       })
                            </div>
                        }
                    </td>
                </tr>
            }
            @if (!Model.IsDepartmentUser)
            {
                <tr>
                    <th>
                        Dean's Office Comments:
                    </th>
                    <td colspan="5">
                        <div class="editor-field">
                            @Html.TextAreaFor(x => x.SalaryReviewAnalysis.DeansOfficeComments, new { rows = "2", cols = "60" })
                        </div>
                    </td>
                </tr>
            }
            <tr>
                <td colspan="6">
                    <center>
                        <a id="btnAddAnotherScenario" href="javascript:__doPostBack('btnAddAnotherScenario','')"
                            style="text-decoration: underline;">Add another scenario</a></center>
                    <br />
                </td>
            </tr>
        </tfoot>
    </table>
    @*<script type="text/javascript">
       <!--
        function resetScenario(scene) {
            // reset a scenario's values back to their default values.
            debugger;

            return false;
        }

        function deleteScenario(scene) {
            // delete a scenario from the scenarios array.
            debugger;

            return false;
        }

        //-->
    </script>*@
</div>