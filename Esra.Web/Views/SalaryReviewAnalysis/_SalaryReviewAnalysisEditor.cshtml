@model Esra.Web.Models.SalaryReviewAnalysisEditorViewModel
@*<h2>
    Salary Scale Details</h2>*@
<div id="salary-scale-details">
    @Html.Partial("_SalaryScale", Model.SalaryScaleViewModel)
</div>
<div id="employee-details">
    @Html.Partial("_EmployeeDetails")
</div>
<div id="salary-review-analysis">
    @using (@Html.BeginForm("CreateEdit", "SalaryReviewAnalysis", FormMethod.Post))
    {
        @Html.Partial("_SalaryReviewAnalysis")

        <center>
            <br />
            <a href="#" id="cancelBack" class="buttons">
                <img alt="Back" src='@Url.Image("arrow_left.jpg")' class="back_button" />&nbsp;Cancel/Back</a>
            &nbsp; &nbsp;<input type="submit" name="btnSubmitSalaryReviewAnalysis" value="Save Salary Review Analysis"
                id="btnSubmitSalaryReviewAnalysis" />
        </center>
    }
</div>
<script language="JavaScript" type="text/javascript">
    <!--
    // This allows the form to submit
    $('#btnSubmitSalaryReviewAnalysis').click(function () {
        //        debugger;
        var scenariosRows = $('#scenarios').find('tbody tr');
        saveModifiedScenarioValues(scenariosRows);

        $(this).parents('form').submit();
    });

    // If this is a new analysis, return to the index page;
    // else return to the details page:
    $('#cancelBack').click(function cancelBack() {

        var salaryReviewAnalysisId = $('#salaryReviewAnalysisId').val(); // "0" for unsaved.
        var href = "";
        if (salaryReviewAnalysisId == null || salaryReviewAnalysisId == "0") {
            href = '@Url.Action("Index", "SalaryReviewAnalysis")';
        }
        else {
            href = '@Url.Action("Details", "SalaryReviewAnalysis", new { referenceNumber = @Model.SalaryReviewAnalysis.ReferenceNumber })';
        }

        window.location.href = href;

        return false;
    });

    function saveModifiedScenarioValues(scenariosRows) {
        scenariosRows.each(function (i, val) {
            updateScenarioValues(i, val);
        });
    }

    // Helper method
    // Given a search string, starting and ending string, and offset values
    // return the string between the starting and ending string.
    function getOldValueFromString(searchString, startingValue, endingValue, offset) {
        //        debugger;
        var myOldStringBegin = searchString.indexOf(startingValue);
        var myOldStringEnd = searchString.indexOf(endingValue);
        var myOldStringLength = myOldStringEnd - myOldStringBegin;
        return searchString.substring(myOldStringBegin + offset, myOldStringBegin + myOldStringLength);
    }

    function updateScenarioValues(i, row) {
        //debugger;
        row = $(row);

        var indexNeedsAdjusting = doesIndexNeedAdjusting(i, row);
        var $myScenarioIndex = i;
        // update scenario number
        var hiddenScenaroNumber = row.find("#hiddenScenarioNumber");
        hiddenScenaroNumber.val(i + 1);

        var selected = row.find('#ddlSelectionType :selected');
        //        if (selected.val() != null && selected.val() != "") {
        // This is the text of the newly selected item, i.e. "Step 6.0", etc:
        //debugger;
        var selectedText = row.find('#ddlSelectionType :selected').text();
        // set the SelectionType hidden field value with the selectedText:
        row.find("#selectionType").val(selectedText);

        // Find the control itself and
        var ddlSelectionType = row.find('#ddlSelectionType');
        // blank out the HTML so that the hidden field takes precedence:
        ddlSelectionType.html("");
        //        }

        // find and reformat percent increase:
        var tbPercentIncrease = row.find(".percent input");
        var percentIncrease = tbPercentIncrease.val();
        if (percentIncrease.search("%") > -1) {
            // Then the number entered was a percent, so parse accordingly:
            percentIncrease = $.parseNumber(percentIncrease, { format: "##.00%", locale: "us" });
        }
        else {
            // Otherwise only a number, meaning 2 for 2%, etc, so convert it back to a decimal:
            percentIncrease = $.parseNumber(percentIncrease, { format: "##.00", locale: "us" }) / 100;
        }
        tbPercentIncrease.val(percentIncrease);

        // find and reformat salary amount:
        var tbSalaryAmount = row.find(".currency input");
        var salaryAmount = tbSalaryAmount.val();
        if (salaryAmount.search("$") > -1) {
            // Then the number entered was a salary amount, so parse accordingly:
            salaryAmount = $.parseNumber(salaryAmount, { format: "$#,###,###.00", locale: "us" });
        }
        else {
            // Otherwise only a number, meaning 2 for $2, etc, so convert it back to a decimal:
            salaryAmount = $.parseNumber(salaryAmount, { format: "#######.00", locale: "us" });
        }
        tbSalaryAmount.val(salaryAmount);

        if (indexNeedsAdjusting) {
            var inputs = row.find("th: input, td: input, td: select");
            inputs.each(function (index, val) {
                //debugger;
                var myScenarioIndex = $myScenarioIndex;
                var name = val.name;
                var k = getOldValueFromString(name, "[", "]", 0);
                var oldIndex = $.parseNumber(k, { format: "[##0", locale: "us" }) * 1;
                if (oldIndex != 0 && oldIndex != myScenarioIndex) {
                    val.name = name.replace(k, "[" + myScenarioIndex);
                }
            });
        }
    };

    function doesIndexNeedAdjusting(index, row) {
        var hiddenScenaroNumber = row.find("#hiddenScenarioNumber");
        var scenarioNumber = hiddenScenaroNumber.val();
        if (scenarioNumber - 1 != index) {
            //        var name = hiddenScenaroNumber[0].name;
            //        var oldIndex = getOldValueFromString(name, "[", "]", 1);
            //        if (oldIndex != index) {
            return true;
        }
        return false;
    }
        //-->
</script>